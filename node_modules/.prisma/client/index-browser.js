
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.1.1
 * Query Engine version: c22652b7e418506fab23052d569b85d3aec4883f
 */
Prisma.prismaVersion = {
  client: "3.1.1",
  engine: "c22652b7e418506fab23052d569b85d3aec4883f"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AdministrativeOrderScalarFieldEnum = makeEnum({
  idAdministrative: 'idAdministrative',
  orderTitleId: 'orderTitleId',
  orderNumber: 'orderNumber',
  orderDescription: 'orderDescription',
  orderYear: 'orderYear',
  orderLevel: 'orderLevel',
  studentId: 'studentId',
  orderDate: 'orderDate',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
});

exports.Prisma.OrderTitleScalarFieldEnum = makeEnum({
  idOrderTitle: 'idOrderTitle',
  title: 'title',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
});

exports.Prisma.ExitCausesScalarFieldEnum = makeEnum({
  idExitCauses: 'idExitCauses',
  exitCausesTitle: 'exitCausesTitle',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
});

exports.Prisma.PassTypeScalarFieldEnum = makeEnum({
  idPassType: 'idPassType',
  passName: 'passName',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  idUser: 'idUser',
  userName: 'userName',
  password: 'password',
  roleId: 'roleId',
  sectionId: 'sectionId',
  createdAt: 'createdAt'
});

exports.Prisma.RoleScalarFieldEnum = makeEnum({
  idRole: 'idRole',
  roleName: 'roleName',
  createdAt: 'createdAt'
});

exports.Prisma.SectionScalarFieldEnum = makeEnum({
  idSection: 'idSection',
  sectionName: 'sectionName',
  code: 'code',
  englishName: 'englishName'
});

exports.Prisma.StudentScalarFieldEnum = makeEnum({
  idStudent: 'idStudent',
  studentName: 'studentName',
  englishName: 'englishName',
  mail: 'mail',
  password: 'password',
  dob: 'dob',
  sectionId: 'sectionId',
  nationality: 'nationality',
  phone: 'phone',
  gender: 'gender',
  studyType: 'studyType',
  relationships: 'relationships',
  note: 'note',
  religion: 'religion',
  motherName: 'motherName',
  collegeNumber: 'collegeNumber',
  registerYearId: 'registerYearId',
  studentStatusId: 'studentStatusId',
  acceptedTypeId: 'acceptedTypeId'
});

exports.Prisma.YearStudyScalarFieldEnum = makeEnum({
  idYearStudy: 'idYearStudy',
  year: 'year',
  currentYear: 'currentYear'
});

exports.Prisma.StudentResponsibleScalarFieldEnum = makeEnum({
  idStudentResponsible: 'idStudentResponsible',
  responsibleName: 'responsibleName',
  responsiblePhone: 'responsiblePhone',
  studentId: 'studentId'
});

exports.Prisma.NationalityCertificateScalarFieldEnum = makeEnum({
  idNationalityCertificate: 'idNationalityCertificate',
  nationalityNumber: 'nationalityNumber',
  nationalityIssue: 'nationalityIssue',
  nationalityPlace: 'nationalityPlace',
  studentId: 'studentId'
});

exports.Prisma.NationalInfoScalarFieldEnum = makeEnum({
  idNationalInfo: 'idNationalInfo',
  nationalNumber: 'nationalNumber',
  issueNumber: 'issueNumber',
  issuePlace: 'issuePlace',
  studentId: 'studentId'
});

exports.Prisma.StudentGraduationScalarFieldEnum = makeEnum({
  idStudentGraduation: 'idStudentGraduation',
  graduationDate: 'graduationDate',
  studentId: 'studentId'
});

exports.Prisma.StudentLevelScalarFieldEnum = makeEnum({
  idStudentLevel: 'idStudentLevel',
  level: 'level',
  class: 'class',
  yearStudyId: 'yearStudyId',
  studentId: 'studentId'
});

exports.Prisma.StudentSchoolScalarFieldEnum = makeEnum({
  idStudentSchool: 'idStudentSchool',
  schoolName: 'schoolName',
  graduationDate: 'graduationDate',
  documentDate: 'documentDate',
  totalMarks: 'totalMarks',
  average: 'average',
  documentNumber: 'documentNumber',
  lessonCount: 'lessonCount',
  Directorate: 'Directorate',
  studySubCategoryId: 'studySubCategoryId',
  studentId: 'studentId',
  certificateStatusId: 'certificateStatusId',
  certificateStatusDescription: 'certificateStatusDescription',
  createdAt: 'createdAt'
});

exports.Prisma.StudyCategoryScalarFieldEnum = makeEnum({
  idStudyCategory: 'idStudyCategory',
  categoryName: 'categoryName'
});

exports.Prisma.StudySubCategoryScalarFieldEnum = makeEnum({
  idStudySubCategory: 'idStudySubCategory',
  subCategoryName: 'subCategoryName',
  studyCategoryId: 'studyCategoryId'
});

exports.Prisma.CertificateStatusScalarFieldEnum = makeEnum({
  idCertificateStatus: 'idCertificateStatus',
  certificateStatusName: 'certificateStatusName'
});

exports.Prisma.StudentStatusScalarFieldEnum = makeEnum({
  idStudentStatus: 'idStudentStatus',
  statusName: 'statusName'
});

exports.Prisma.AcceptedTypeScalarFieldEnum = makeEnum({
  idAcceptedType: 'idAcceptedType',
  acceptedName: 'acceptedName'
});

exports.Prisma.StudentImageScalarFieldEnum = makeEnum({
  idStudentImage: 'idStudentImage',
  imagePath: 'imagePath',
  studentId: 'studentId'
});

exports.Prisma.ProvinceScalarFieldEnum = makeEnum({
  idProvince: 'idProvince',
  provinceName: 'provinceName',
  provinceNameEn: 'provinceNameEn'
});

exports.Prisma.AddressScalarFieldEnum = makeEnum({
  idAddress: 'idAddress',
  provinceId: 'provinceId',
  district: 'district',
  avenue: 'avenue',
  houseNumber: 'houseNumber',
  streetNumber: 'streetNumber',
  studentId: 'studentId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  AdministrativeOrder: 'AdministrativeOrder',
  OrderTitle: 'OrderTitle',
  ExitCauses: 'ExitCauses',
  PassType: 'PassType',
  User: 'User',
  Role: 'Role',
  Section: 'Section',
  Student: 'Student',
  YearStudy: 'YearStudy',
  StudentResponsible: 'StudentResponsible',
  NationalityCertificate: 'NationalityCertificate',
  NationalInfo: 'NationalInfo',
  StudentGraduation: 'StudentGraduation',
  StudentLevel: 'StudentLevel',
  StudentSchool: 'StudentSchool',
  StudyCategory: 'StudyCategory',
  StudySubCategory: 'StudySubCategory',
  CertificateStatus: 'CertificateStatus',
  StudentStatus: 'StudentStatus',
  AcceptedType: 'AcceptedType',
  StudentImage: 'StudentImage',
  Province: 'Province',
  Address: 'Address'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
